{"version":3,"sources":["script.js"],"names":["themeBtn","document","querySelector","addEventListener","userPreference","body","getAttribute","includes","setLightMode","setDarkMode","window","localStorage","setItem","loadUserPreference","getItem","loadPrefersColorScheme","matchMedia","matches","event","loadThemePreferences","classList","remove","add","inputForm","inputCheckbox","inputTextfield","checkInputText","todoComponent","addTodoData","value","preventDefault","key","todoFunctions","createListComponents","todoText","listId","_this","this","ul","li","createElement","form","label","input","span","div","button","type","append","appendChild","innerText","forEach","element","localName","completeItem","editItem","removeItem","markLiComplete","todoData","object","todoId","isCompleted","querySelectorAll","toggle","concat","removeLi","_this2","idx","splice","updateLi","_this3","successMessage","modal","modalOverlay","modalTextarea","openModal","console","log","call","push","bind","markComplete"],"mappings":"AAAA,aAOA,IAAMA,SAAWC,SAASC,cAAc,cAExCF,SAASG,iBAAiB,SAAS,WACjC,IACMC,EADcH,SAASI,KAAKC,aAAa,SACZC,SAAS,cAAgBC,eAAiBC,cAC7EC,OAAOC,aAAaC,QAAQ,eAAgBR,MAG9C,IAAMS,mBAAqB,WACzB,QAAGH,OAAOC,aAAaG,QAAQ,kBAEd,cADOJ,OAAOC,aAAaG,QAAQ,gBACpBL,cAAgBD,gBACvC,IAMLO,uBAAyB,YACZL,OAAOM,WAAW,gCAAgCC,SACxDR,cACXC,OAAOM,WAAW,gCAAgCb,iBAAiB,UAAU,SAACe,GACxEL,uBACFK,EAAMD,SAAUR,kBAIhBU,qBAAuB,WAC3B,OAAON,sBAAwBE,0BAGjC,SAASP,eAGP,OAFAP,SAASI,KAAKe,UAAY,cAC1BpB,SAASoB,UAAUC,OAAO,SACnB,cAGT,SAASZ,cAIP,OAHAR,SAASI,KAAKe,UAAY,aAC1BnB,SAASI,KAAKe,UAAUE,IAAI,WAC5BtB,SAASoB,UAAY,QACd,aAGTD,uBAMA,IAAMI,UAAYtB,SAASC,cAAc,eACnCsB,cAAgBvB,SAASC,cAAc,mBACvCuB,eAAiBxB,SAASC,cAAc,oBAc9C,SAASwB,iBACP,QAAOD,gBAAiBE,cAAcC,YAAYH,eAAeI,OAbnEN,UAAUpB,iBAAiB,UAAU,SAACe,GACpCA,EAAMY,oBAGRN,cAAcrB,iBAAiB,SAAS,WACtCuB,oBAGFD,eAAetB,iBAAiB,YAAY,SAACe,GAC5B,UAAZA,EAAMa,KAAeL,oBAO1B,IAAMM,cAAgB,CACpBC,qBADoB,SACCC,EAAUC,GAAO,IAAAC,EAAAC,KAC9BC,EAAKrC,SAASC,cAAc,YAC5BqC,EAAKtC,SAASuC,cAAc,MAC5BC,EAAOxC,SAASuC,cAAc,QAC9BE,EAAQzC,SAASuC,cAAc,SAC/BG,EAAQ1C,SAASuC,cAAc,SAC/BI,EAAO3C,SAASuC,cAAc,QAC9BK,EAAM5C,SAASuC,cAAc,OAC7BM,EAAS7C,SAASuC,cAAc,UAEtCG,EAAMI,KAAO,WACbL,EAAMM,OAAOL,EAAOC,GACpBH,EAAKQ,YAAYP,GAEjBG,EAAIK,UAAYhB,EAEhBK,EAAGnB,UAAUE,IAAIa,GACjBI,EAAGS,OAAOP,EAAMI,EAAKC,GACrBR,EAAGW,YAAYV,GAEA,CAACI,EAAOE,EAAKC,GACrBK,SAAQ,SAACC,GACdA,EAAQjD,iBAAiB,SAAS,WACT,UAApBiD,EAAQC,UAAqBjB,EAAKkB,aAAanB,GACtB,QAApBiB,EAAQC,UAAmBjB,EAAKmB,SAASpB,GACrB,WAApBiB,EAAQC,WAAsBjB,EAAKoB,WAAWrB,UAI5DsB,eA9BoB,SA8BLtB,GACbE,KAAKqB,SAASP,SAAQ,SAACQ,GAClBA,EAAOC,QAAQzB,IAChBwB,EAAOE,YAAkC,GAApBF,EAAOE,YACR5D,SAAS6D,iBAAiB,eAClCX,SAAQ,SAACC,GAChBA,EAAQ9C,aAAa,QAAS6B,GAAQ5B,SAAS4B,KAChDiB,EAAQhC,UAAU2C,OAAO,gBACb9D,SAASC,cAAT,aAAA8D,OAAoC7B,EAApC,SACRf,UAAU2C,OAAO,yBAM/BE,SA7CoB,SA6CX9B,GAAO,IAAA+B,EAAA7B,KACMpC,SAAS6D,iBAAiB,eAClCX,SAAQ,SAACC,GAChBA,EAAQ9C,aAAa,QAAS6B,GAAQ5B,SAAS4B,KAChDiB,EAAQ/B,SACR6C,EAAKR,SAASP,SAAQ,SAACQ,EAAQQ,GAC1BhC,GAAQwB,EAAOC,QAChBM,EAAKR,SAASU,OAAOD,EAAK,WAKpCE,SAzDoB,SAyDXlC,GAAO,IAAAmC,EAAAjC,KACRkC,EAAiBtE,SAASC,cAAc,oBACxCsE,EAAQvE,SAASC,cAAc,UAC/BuE,EAAexE,SAASC,cAAc,kBAC5CqE,EAAenD,UAAUC,OAAO,iBAChCmD,EAAMpD,UAAU2C,OAAO,eACvBU,EAAarD,UAAU2C,OAAO,uBAEX9D,SAAS6D,iBAAiB,gBAClCX,SAAQ,SAACC,GAClBA,EAAQjD,iBAAiB,SAAS,WAChCqE,EAAMpD,UAAY,QAClBqD,EAAarD,UAAY,sBAIXnB,SAASC,cAAc,eAC/BC,iBAAiB,UAAU,SAACe,GACpCA,EAAMY,oBAGR,IAAM4C,EAAgBzE,SAASC,cAAc,cAC7CmC,KAAKqB,SAASP,SAAQ,SAACC,GAClBA,EAAQQ,SAASzB,IAClBuC,EAAcxB,UAAYE,EAAQlB,SAClCoC,EAAKK,UAAYxC,MAKFlC,SAASC,cAAc,eAC/BC,iBAAiB,SAAS,SAACiD,GACdnD,SAASC,cAAc,cAAc2B,MAC3D+C,QAAQC,IAAI1C,GACZmC,EAAKZ,SAASP,SAAQ,SAACC,GAClBA,EAAQQ,SAASU,EAAKK,WACvBC,QAAQC,IAAIP,EAAKK,mBAqBrBhD,cAAgB,CACpBiC,OAAQ,EACRF,SAAU,GACV1B,cAAAA,cACAJ,YAJoB,SAIRM,GACV,IAAO0B,EAAoBvB,KAApBuB,OAAQF,EAAYrB,KAAZqB,SACTvB,EAAS,aAAayB,EAC5BvB,KAAKL,cAAcC,qBAAqB6C,KAAKzC,KAAMH,EAAUC,GAC7DuB,EAASqB,KAAK,CACZnB,OAAQzB,EACRD,SAAAA,EACA2B,aAAa,IAEfxB,KAAKuB,QAAQ,GAEfN,aAfoB,SAePnB,GACUE,KAAKL,cAAcyB,eAAeuB,KAAK3C,KAAMF,EAClE8C,IAEF1B,SAnBoB,SAmBXpB,GACPE,KAAKL,cAAcqC,SAASS,KAAKzC,KAAMF,IAEzCqB,WAtBoB,SAsBTrB,GACTE,KAAKL,cAAciC,SAASa,KAAKzC,KAAMF","file":"script.js","sourcesContent":["/*\r\nThe page is loaded with the theme based on the user's\r\nlast preference (stored in the local storage). This\r\nhave a higher precedence over the system \r\nprefers-color-scheme. In initial load, the default theme \r\nis the user's system preference.\r\n*/\r\nconst themeBtn = document.querySelector('#theme-btn');\r\n\r\nthemeBtn.addEventListener('click', () => {\r\n  const currentMode = document.body.getAttribute('class');\r\n  const userPreference = currentMode.includes('dark-theme') ? setLightMode() : setDarkMode();\r\n  window.localStorage.setItem('todoAppTheme', userPreference);\r\n});\r\n\r\nconst loadUserPreference = () => {\r\n  if(window.localStorage.getItem('todoAppTheme')){\r\n    const preferedTheme = window.localStorage.getItem('todoAppTheme');\r\n    preferedTheme=='dark-theme' ? setDarkMode() : setLightMode();\r\n    return true;\r\n  }else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst loadPrefersColorScheme = () => { \r\n  const darkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  darkMode ? setDarkMode() : 'Application default: light mode';\r\n  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (event) => { \r\n    if(!loadUserPreference())\r\n      event.matches ? setDarkMode() : 'setLightMode()';\r\n  });\r\n};\r\n\r\nconst loadThemePreferences = function(){\r\n  return loadUserPreference() || loadPrefersColorScheme();\r\n};\r\n\r\nfunction setLightMode(){\r\n  document.body.classList = 'light-theme';\r\n  themeBtn.classList.remove('night');\r\n  return 'light-theme';\r\n}\r\n\r\nfunction setDarkMode(){\r\n  document.body.classList = 'dark-theme';\r\n  document.body.classList.add('dark-bg');\r\n  themeBtn.classList = 'night';\r\n  return 'dark-theme';\r\n}\r\n\r\nloadThemePreferences();\r\n\r\n/*\r\nTodo Component\r\n*/\r\n\r\nconst inputForm = document.querySelector('#input-form');\r\nconst inputCheckbox = document.querySelector('#input-checkbox');\r\nconst inputTextfield = document.querySelector('#input-textfield');\r\n\r\ninputForm.addEventListener('submit', (event) => {\r\n  event.preventDefault();\r\n});\r\n\r\ninputCheckbox.addEventListener('click', () => {\r\n  checkInputText();\r\n});\r\n\r\ninputTextfield.addEventListener('keypress', (event) => {\r\n  if(event.key==='Enter') checkInputText();\r\n});\r\n\r\nfunction checkInputText(){\r\n  return inputTextfield ? todoComponent.addTodoData(inputTextfield.value) : false;\r\n}\r\n\r\nconst todoFunctions = {\r\n  createListComponents(todoText, listId){\r\n    const ul = document.querySelector('#todo-ul');\r\n    const li = document.createElement('li');\r\n    const form = document.createElement('form');\r\n    const label = document.createElement('label');\r\n    const input = document.createElement('input');\r\n    const span = document.createElement('span');\r\n    const div = document.createElement('div');\r\n    const button = document.createElement('button');\r\n\r\n    input.type = 'checkbox';\r\n    label.append(input, span);\r\n    form.appendChild(label);\r\n\r\n    div.innerText = todoText;\r\n\r\n    li.classList.add(listId);\r\n    li.append(form, div, button);\r\n    ul.appendChild(li);\r\n\r\n    const listen = [input, div, button];\r\n    listen.forEach((element) => {\r\n      element.addEventListener('click', () => {\r\n        if(element.localName==='input') this.completeItem(listId);\r\n        else if(element.localName==='div') this.editItem(listId);\r\n        else if(element.localName==='button') this.removeItem(listId);\r\n      });\r\n    });\r\n  },\r\n  markLiComplete(listId){\r\n    this.todoData.forEach((object) => {\r\n      if(object.todoId==listId){\r\n        object.isCompleted = object.isCompleted==true ? false: true;\r\n        const allListItem = document.querySelectorAll('#todo-ul li');\r\n        allListItem.forEach((element) => {\r\n          if(element.getAttribute('class', listId).includes(listId)){\r\n            element.classList.toggle('li-completed');\r\n            const div = document.querySelector(`#todo-ul .${listId} div`);\r\n            div.classList.toggle('disable-edit');\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n  removeLi(listId){\r\n    const allListItem = document.querySelectorAll('#todo-ul li');\r\n    allListItem.forEach((element) => {\r\n      if(element.getAttribute('class', listId).includes(listId)){\r\n        element.remove();\r\n        this.todoData.forEach((object, idx) => {\r\n          if(listId==object.todoId)\r\n            this.todoData.splice(idx, 1);\r\n        });\r\n      }\r\n    });\r\n  },\r\n  updateLi(listId){\r\n    const successMessage = document.querySelector('#success-message');\r\n    const modal = document.querySelector('.modal');\r\n    const modalOverlay = document.querySelector('.modal-overlay');\r\n    successMessage.classList.remove('changes-saved');\r\n    modal.classList.toggle('modal__show');\r\n    modalOverlay.classList.toggle('modal-overlay__show');\r\n\r\n    const modalClose = document.querySelectorAll('.modal-close');\r\n    modalClose.forEach((element) => {\r\n      element.addEventListener('click', () => {\r\n        modal.classList = 'modal';\r\n        modalOverlay.classList = 'modal-overlay';\r\n      });\r\n    });\r\n\r\n    const modalForm = document.querySelector('#modal-form');\r\n    modalForm.addEventListener('submit', (event) => {\r\n      event.preventDefault();\r\n    });\r\n\r\n    const modalTextarea = document.querySelector('#text-area');\r\n    this.todoData.forEach((element) => {\r\n      if(element.todoId===listId){\r\n        modalTextarea.innerText = element.todoText;\r\n        this.openModal = listId;\r\n      }\r\n        \r\n    });\r\n\r\n    const saveUpdate = document.querySelector('.modal-save');\r\n    saveUpdate.addEventListener('click', (element) => {\r\n      const textareaValue = document.querySelector('#text-area').value;\r\n      console.log(listId);\r\n      this.todoData.forEach((element) => {\r\n        if(element.todoId===this.openModal){\r\n          console.log(this.openModal);\r\n          //if(textareaValue!=false){\r\n            // element.todoText = textareaValue;\r\n            // const div = document.querySelector(`#todo-ul .${listId} div`);\r\n            // div.innerText = textareaValue;\r\n            // successMessage.classList.add('changes-saved');\r\n            // setTimeout(() => {\r\n            //   modal.classList = 'modal';\r\n            //   modalOverlay.classList = 'modal-overlay';\r\n            // }, 500);\r\n          // }else {\r\n          //   this.removeItem(listId);\r\n          //   modal.classList = 'modal';\r\n          //   modalOverlay.classList = 'modal-overlay';\r\n          // }\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst todoComponent = {\r\n  todoId: 1,\r\n  todoData: [],\r\n  todoFunctions,\r\n  addTodoData(todoText){\r\n    const {todoId, todoData} = this;\r\n    const listId = 'list-item-'+todoId;\r\n    this.todoFunctions.createListComponents.call(this, todoText, listId);\r\n    todoData.push({\r\n      todoId: listId,\r\n      todoText,\r\n      isCompleted: false\r\n    });\r\n    this.todoId+=1;\r\n  },\r\n  completeItem(listId){\r\n    const markComplete = this.todoFunctions.markLiComplete.bind(this, listId);\r\n    markComplete();\r\n  },\r\n  editItem(listId){\r\n    this.todoFunctions.updateLi.call(this, listId);\r\n  },\r\n  removeItem(listId){\r\n    this.todoFunctions.removeLi.call(this, listId);\r\n  }\r\n}\r\n"]}